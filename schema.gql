# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Item {
  id: ID!
  name: String!
  subItemsAggregate(
    """Filter to find records to aggregate on"""
    filter: ItemAggregateFilter
  ): [ItemSubItemsAggregateResponse!]!
  subItems(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ItemFilter! = {}

    """Specify to sort results."""
    sorting: [ItemSort!]! = []
  ): ItemSubItemsConnection!
}

input ItemAggregateFilter {
  and: [ItemAggregateFilter!]
  or: [ItemAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input ItemFilter {
  and: [ItemFilter!]
  or: [ItemFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
}

input ItemSort {
  field: ItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ItemSortFields {
  id
  name
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type ItemDeleteResponse {
  id: ID
  name: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type ItemConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Item!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ItemAggregateGroupBy {
  id: ID
  name: String
}

type ItemCountAggregate {
  id: Int
  name: Int
}

type ItemMinAggregate {
  id: ID
  name: String
}

type ItemMaxAggregate {
  id: ID
  name: String
}

type ItemAggregateResponse {
  groupBy: ItemAggregateGroupBy
  count: ItemCountAggregate
  min: ItemMinAggregate
  max: ItemMaxAggregate
}

type ItemEdge {
  """The node containing the Item"""
  node: Item!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type ItemSubItemsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ItemEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ItemSubItemsAggregateGroupBy {
  id: ID
  name: String
}

type ItemSubItemsCountAggregate {
  id: Int
  name: Int
}

type ItemSubItemsMinAggregate {
  id: ID
  name: String
}

type ItemSubItemsMaxAggregate {
  id: ID
  name: String
}

type ItemSubItemsAggregateResponse {
  groupBy: ItemSubItemsAggregateGroupBy
  count: ItemSubItemsCountAggregate
  min: ItemSubItemsMinAggregate
  max: ItemSubItemsMaxAggregate
}

type Query {
  itemAggregate(
    """Filter to find records to aggregate on"""
    filter: ItemAggregateFilter
  ): [ItemAggregateResponse!]!
  item(
    """The id of the record to find."""
    id: ID!
  ): Item!
  items(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ItemFilter! = {}

    """Specify to sort results."""
    sorting: [ItemSort!]! = []
  ): ItemConnection!
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Mutation {
  createOneItem(input: CreateOneItemInput!): Item!
  createManyItems(input: CreateManyItemsInput!): [Item!]!
  updateOneItem(input: UpdateOneItemInput!): Item!
  updateManyItems(input: UpdateManyItemsInput!): UpdateManyResponse!
  deleteOneItem(input: DeleteOneItemInput!): ItemDeleteResponse!
  deleteManyItems(input: DeleteManyItemsInput!): DeleteManyResponse!
}

input CreateOneItemInput {
  """The record to create"""
  item: CreateItemInput!
}

input CreateItemInput {
  name: String!
  parent: String
}

input CreateManyItemsInput {
  """Array of records to create"""
  items: [CreateItemInput!]!
}

input UpdateOneItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateItemInput!
}

input UpdateItemInput {
  parent: String
}

input UpdateManyItemsInput {
  """Filter used to find fields to update"""
  filter: ItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateItemInput!
}

input ItemUpdateFilter {
  and: [ItemUpdateFilter!]
  or: [ItemUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
}

input DeleteOneItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyItemsInput {
  """Filter to find records to delete"""
  filter: ItemDeleteFilter!
}

input ItemDeleteFilter {
  and: [ItemDeleteFilter!]
  or: [ItemDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
}